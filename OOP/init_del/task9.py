class ListObject:
    '''односвязный список'''

    def __init__(self, data: str) -> None:
        self.data = data  # данные объекта в виде строки
        self.next_obj = None  # ссылка на следующий присоеденненый объект

    def link(self, obj: object) -> None:
        self.next_obj = obj


if __name__ == '__main__':
    lst = [
        '1. Первые шаги в ООП', '1.1 Как правильно проходить этот курс',
        '1.2 Концепция ООП простыми словами', '1.3 Классы и объекты. Атрибуты классов и объектов',
        '1.4 Методы классов. Параметр self', '1.5 Инициализатор init, финалзатор del',
        '1.6 Магический метод new. Пример паттерна Singleton',
        '1.7 Методы класса (classethod) и статические методы (staticmethod)'
    ]

    # запись данных в односвязный список
    head_obj = ListObject(lst[0])  # первый запись, начало
    obj = head_obj  # вспомогательная переменная,

    # перебираем список начиная с 2 элемента
    for i in range(1, len(lst)):
        obj_n = ListObject(lst[i])  # вспомогательная переменная, помещаем новую строку
        obj.link(obj_n)  # ссылка на следующий объект
        obj = obj_n  # обновляем ссылку на следующий объект

    # считывание односвязного списка
    print(head_obj.data)  # печать первого элемента односвязного списка
    r_obj = head_obj.next_obj  # вспомогательная переменная, ссылка на следующий объект

    # цикл, пока не равно None, выполнять, пока не закончится
    while r_obj.next_obj != None:
        print(r_obj.data)  # печать данных из следующего объекта
        r_obj = r_obj.next_obj  # обновление ссылки на следующий объект
