class Data:    # для описания пакета информации    def __init__(self, data: str, ip: int) -> None:        self.data = data  # передаваемые данные (строка)        self.ip = ip  # IP-адрес назначенияclass Server:    # для описания работы серверов в сети    def __init__(self, ip: int) -> None:        self.buffer = []  # список отправляемых, принятых пакетов (объекты класса Data, изначально пустой)        self.ip = ip  # IP-адрес текущего сервера    def send_data(self, data: str, ip: int) -> None:        # для отправки информационного пакета data (объекта класса Data) с указанным IP-адресом получателя        # (пакет отправляется роутеру и сохраняется в его буфере - локальном свойстве buffer)        dt = Data(data, ip)        self.buffer.append(dt)  # сохраняем в буфере сервера    def get_data(self) -> None:        # возвращает список принятых пакетов (если ничего принято не было, то возвращается пустой список)        # и очищает входной буфер        print('#' * 100)        print(f'Сообщение {self.get_ip()} серверу:', end='\n' + '#' * 100 + '\n')        for pack in self.buffer:            print(f'от {pack.ip}: {pack.data}')        print('_' * 100)        self.buffer.clear()    def get_ip(self) -> int:        # возвращает свой IP-адрес        return self.ipclass Router:    # для описания работы роутеров в сети    def __init__(self) -> None:        # список для хранения принятых от серверов пакетов (объектов класса Data)        self.buffer = []  # хранилище сообщений        self.servers = {}  # список подключенных серверов    def link(self, server: Server) -> None:        # для присоединения сервера server (объекта класса Server) к роутеру        if server == Server:            self.servers[server.get_ip()] = server            for pack in server.buffer:                self.buffer.append((server.get_ip(), pack))  # адрес отправителя, объект класса Data                server.buffer.remove(pack)    def unlink(self, server: Server) -> None:        # для отсоединения сервера server (объекта класса Server) от роутера        self.servers.pop(server.get_ip())    def send_data(self) -> None:        # для отправки всех пакетов (объектов класса Data) из буфера роутера соответствующим серверам        # (после отправки буфер должен очищаться)        if self.buffer != []:            for pack in self.buffer:                if pack[0] in self.servers:                    sv = self.servers[pack[1].ip]  # объект класса Server, кому отправляем                    pack[1].ip = pack[0]  # меняем на адрес отправителя                    sv.buffer.append(pack[1])  # сохраняем в буфере сервера адресата        self.buffer.clear()def buffer_status():    print('~' * 100)    print(f'Сервера: {router.servers}', end='\n' + '~' * 100 + '\n')    print(f'Буфер роутора: {router.buffer}', end='\n' + '-' * 100 + '\n')    print(f'буфер 1 сервера: {sv1.buffer}', end='\n' + '-' * 100 + '\n')    print(f'буфер 2 сервера: {sv2.buffer}', end='\n' + '-' * 100 + '\n')    print(f'буфер 3 сервера: {sv3.buffer}', end='\n' + '-' * 100 + '\n')    print(f'буфер 4 сервера: {sv4.buffer}', end='\n' + '-' * 100 + '\n')def message(serv: Server, msg: str, ip: int) -> None:    serv.send_data(msg, ip)    router.link(serv)if __name__ == '__main__':    sv1 = Server(1)    sv2 = Server(2)    sv3 = Server(3)    sv4 = Server(4)    router = Router()    #    message(sv1, 'hi', 2)    message(sv1, 'Milan, how are you?', 3)    message(sv3, 'Well. Are you?', 1)    message(sv3, 'good nigth!', 2)    message(sv2, 'You too!!!', 3)    message(sv4, 'see you leter!', 1)    message(sv3, 'Buy buy!!!', 4)    router.link(sv1)    router.link(sv2)    router.link(sv3)    router.link(sv4)    router.send_data()  # отправка данных    # buffer_status()    sv1.get_data()  # прочитать сообщения    sv2.get_data()  # прочитать сообщения    sv3.get_data()  # прочитать сообщения    sv4.get_data()  # прочитать сообщения    # buffer_status()