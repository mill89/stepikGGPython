class Data:    # для описания пакета информации    def __init__(self, data: str, ip: int) -> None:        self.data = data  # передаваемые данные (строка)        self.ip = ip  # IP-адрес назначенияclass Server:    # для описания работы серверов в сети    def __init__(self, ip: int) -> None:        self.buffer = []  # список принятых пакетов (объекты класса Data, изначально пустой)        self.ip = ip  # IP-адрес текущего сервера    def send_data(self, data: str, ip: int) -> None:        # для отправки информационного пакета data (объекта класса Data) с указанным IP-адресом получателя        # (пакет отправляется роутеру и сохраняется в его буфере - локальном свойстве buffer)        dt = Data(data, ip)        self.buffer.append(dt)    def get_data(self):        # возвращает список принятых пакетов (если ничего принято не было, то возвращается пустой список)        # и очищает входной буфер        n = 1        print('Message:')        for pack in self.buffer:            print(f'от {pack[0]}: {pack[1].data}')            n += 1        self.buffer.clear()    def get_ip(self) -> int:        # возвращает свой IP-адрес        return self.ipclass Router:    # для описания работы роутеров в сети    def __init__(self) -> None:        # список для хранения принятых от серверов пакетов (объектов класса Data)        self.buffer = []        self.servers = {}    def link(self, server: Server) -> None:        # для присоединения сервера server (объекта класса Server) к роутеру        self.servers[server.get_ip()] = server        for pack in server.buffer:            self.buffer.append((server.get_ip(), pack))        server.buffer.clear()    def unlink(self, server: Server) -> None:        # для отсоединения сервера server (объекта класса Server) от роутера        self.servers.pop(server.get_ip())    def send_data(self):        # для отправки всех пакетов (объектов класса Data) из буфера роутера соответствующим серверам        # (после отправки буфер должен очищаться)        for i, pack in self.buffer:            sv = self.servers[pack.ip]            self.link(sv)            sv.buffer.append((i, pack))        self.buffer.clear()if __name__ == '__main__':    sv1 = Server(1)    sv2 = Server(2)    sv3 = Server(3)    sv4 = Server(4)    router = Router()    # dt = Data('milan', 2)    # print(dt.ip)    sv1.send_data('hi', 4) #сообщение 1 сервера 4 му    router.link(sv1)    router.unlink(sv1)    sv1.send_data('Milan, how are you?', 3) #сообщение 1 сервера 4 му    router.link(sv1)  # соединение с роутером 1 сервера    router.unlink(sv1)  # соединение с роутером 1 сервера    sv3.send_data('Well. Are you?', 1)    router.link(sv3)  # соединение с роутером 1 сервера    router.unlink(sv3)  # соединение с роутером 1 сервера    sv3.send_data('good nigth!', 2)    router.link(sv3)  # соединение с роутером 1 сервера    router.unlink(sv3)  # соединение с роутером 1 сервера    sv2.send_data('You too!!!', 3)    router.link(sv2)  # соединение с роутером 1 сервера    router.unlink(sv2)  # соединение с роутером 1 сервера    sv4.send_data('see you leter!', 1)    router.link(sv4)  # соединение с роутером 1 сервера    router.unlink(sv4)  # соединение с роутером 1 сервера    sv3.send_data('Buy buy!!!', 4)    router.link(sv3)  #соединение с роутером 1 сервера    router.unlink(sv3)  #соединение с роутером 1 сервера    router.send_data() #отправка данных    # print(f'buf_sv1: {sv1.buffer}')    print(f'servers: {router.servers}')    print(f'buf_router: {router.buffer}')    print(f'buf_sv1: {sv1.buffer}')    print(f'buf_sv2: {sv2.buffer}')    print(f'buf_sv3: {sv3.buffer}')    print(f'buf_sv4: {sv4.buffer}')    sv4.get_data()  # прочитать сообщения